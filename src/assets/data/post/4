{"title":"Solve \"Angular Universal doesn't wait for HTTP calls end\"","description":"It's mostly your fault","keywords":["Angular","Angular Universal","nguniversal","SEO","prerender"],"tags":["Javascript","Typescript","Angular2+","SSR"],"banner":"/assets/images/posts/4/banner.png","thumbnail":"/assets/images/posts/4/thumbnail.png","bannerCredit":{"name":"Ilya Pavlov","id":"@ilyapavlov"},"publish":"2022-04-25 13:49:00","id":"4","contents":"The Angular can serve static html files for SEO without using server.\r\n[Angular prerendering](https://angular.io/guide/prerendering) is key technology to make it work.\r\nHowever, it is not kind enough to developers.\r\nIn some case, it doesn't provide fully detailed error,\r\nand this makes you annoying and confusing.\r\n\r\nFortunately, most of the issues from prerendering is your fault.\r\nSo what you need is just the way to figure out problems.\r\n\r\n# Http calls in Angular Universal\r\n\r\nThe Angular is the most perfect web frontend framework.\r\nAnd the Angular Universal is the most perfect SSR framework with Angular.\r\nWhen there are some http calls in your project,\r\nbasically the Angular Universal waits until the http calls end.\r\n\r\nIf your application doesn't wait,\r\nthere is a high possibility that an error occurred\r\nwhile rendering components from the server.\r\nActually, it's not a bug of Angular prerendering.\r\n\r\n# Force rendering the components\r\n\r\nThe way to find out the problems is simple.\r\nJust force rendering the un-rendered component.\r\nLet me show you 2 cases.\r\n\r\nThis way can show you the errors which are not notified by Angular prerendering.\r\n\r\n## When the component is empty\r\n\r\nLet's assume that the situation.\r\n\r\nYou're calling `GET /data` API and the following is a response of it.\r\n\r\n```json\r\n{\r\n  \"name\": \"tk2rush90\",\r\n  \"job\": \"full-stack developer\"\r\n}\r\n```\r\n\r\nAnd your `user.component.ts` and `user-page.component.ts` looks like below.\r\n\r\n```typescript\r\nimport {Component, Input, OnInit} from '@angular/core';\r\n\r\n/**\r\n * The `user.component.ts` file to display user data.\r\n */\r\n@Component({\r\n  selector: 'app-user',\r\n  template: `\r\n    <div>\r\n      {{name}}\r\n    </div>\r\n    <div>\r\n      {{job}}\r\n    </div>\r\n  `\r\n})\r\nexport class UserComponent implements OnInit {\r\n  /**\r\n   * User data to display.\r\n   */\r\n  @Input() user!: {name: string, job: string};\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void { }\r\n}\r\n```\r\n\r\n```typescript\r\nimport {Component, OnInit} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\n\r\n/**\r\n * The `user-page.component.ts` file which show user profile.\r\n */\r\n@Component({\r\n  selector: 'app-user-page',\r\n  template: `\r\n    <app-user\r\n      *ngIf=\"user\"\r\n      [user]=\"user\"></app-user>\r\n  `\r\n})\r\nexport class UserPageComponent implements OnInit {\r\n  /**\r\n   * Fetched user data.\r\n   */\r\n  user?: {name: string, job: string};\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this._getData();\r\n  }\r\n\r\n  /**\r\n   * Get user data from the backend.\r\n   */\r\n  private _getData(): void {\r\n    this.http.get('/data')\r\n      .subscribe({\r\n        next: res => {\r\n          this.user = res;\r\n        },\r\n      });\r\n  }\r\n}\r\n```\r\n\r\nThen, assume that you met empty `<app-user-page>` component\r\nafter prerendering your application.\r\n(Actually, the above code will work well. It's just assumption)\r\n\r\nIn this case, what you can do is rendering `<app-user>` component with mock user data.\r\n\r\n```typescript\r\nimport {Component, OnInit} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\n\r\n/**\r\n * The `user-page.component.ts` file which show user profile.\r\n */\r\n@Component({\r\n  selector: 'app-user-page',\r\n  template: `\r\n    <app-user\r\n      *ngIf=\"user\"\r\n      [user]=\"user\"></app-user>\r\n  `\r\n})\r\nexport class UserPageComponent implements OnInit {\r\n  /**\r\n   * Set mock data force rendering the child component.\r\n   */\r\n  user: {name: string, job: string} = {\r\n    name: 'tk2rush90',\r\n    job: 'full-stack developer',\r\n  };\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n  ) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // Comment out calling API.\r\n    // this._getData();\r\n  }\r\n\r\n  /**\r\n   * Get user data from the backend.\r\n   */\r\n  private _getData(): void {\r\n    this.http.get('/data')\r\n      .subscribe({\r\n        next: res => {\r\n          this.user = res;\r\n        },\r\n      });\r\n  }\r\n}\r\n```\r\n\r\n## When the `<router-outlet>` is not rendered\r\n\r\nThere may be the case of empty contents without rendering routing components like,\r\n\r\n```html\r\n<!-- This is prerendered HTML file of your application. -->\r\n<html lang=\"en\">\r\n  <head>\r\n    <title>Title</title>\r\n  </head>\r\n  <body>\r\n    <app-root>\r\n      <router-outlet></router-outlet>\r\n      <!-- No page component is rendered. -->\r\n    </app-root>\r\n  </body>\r\n</html>\r\n```\r\n\r\nThen, use same way above by forcing rendering the page component.\r\n\r\n```typescript\r\nimport {Component} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  template: `\r\n    <router-outlet></router-outlet>\r\n    <app-page-component><app-page-component>\r\n  `\r\n})\r\n```\r\n\r\n# Conclusion\r\n\r\nIt may not be helpful to you,\r\nbut I believe this can be the first step to solve your issues.\r\n\r\nIf you didn't get any errors with this way,\r\nthen you can try another way by searching Google God.\r\n","created":"2022-04-25 13:49:00"}