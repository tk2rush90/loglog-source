{"title":"Build the blog on GitHub pages with Angular","description":"SEO fully supported GitHub pages with Angular","keywords":["Angular","Angular Universal","nguniversal","SEO","prerender","GitHub","GitHub pages","Blog"],"tags":["Javascript","Typescript","Angular2+","SSR","GitHub"],"banner":"/assets/images/posts/5/banner.png","thumbnail":"/assets/images/posts/5/thumbnail.png","bannerCredit":{"name":"Richy Great","id":"@richygreat"},"publish":"2022-04-26 00:04:00","id":"5","contents":"The most representative way to build a blog using GitHub pages is\r\nto use the [Jekyll](https://jekyllrb-ko.github.io/) template.\r\nI also made my blog using Jekyll template.\r\nHowever, I recently renewed it based on Angular,\r\nand this post is about why and how I created the Angular based GitHub pages blog.\r\n\r\n# Why Angular?\r\n\r\nJekyll template is a great tool that allows you to build a simple blog with GitHub pages.\r\nSearch engines can be optimized, posts can be easily written through markdown,\r\nand templates can be easily customized if you know a little HTML, CSS, and Javascript.\r\nIn fact, you need to know [Liquid](https://jekyllrb.com/docs/liquid/) grammar, but it is not difficult either.\r\n\r\nHowever, there are also disadvantages, which are difficult to use frontend frameworks.\r\nFor this reason, there was a problem that more time and effort were needed to create each screen or component,\r\nand maintenance was difficult.\r\n\r\nSo I decided to use Angular to remake my blog,\r\nand the reason I chose Angular is simple.\r\nBecause it is the best frontend framework I know.\r\n\r\nIn addition, when using Angular with Angular Universal,\r\nHTML contents that should be rendered on the server\r\ncan be made into actual HTML files in advance by using the prerendering.\r\nThis means that even GitHub pages, which cannot build servers,\r\ncan create Angular applications with fully supported SEO.\r\n\r\n# How to create GitHub pages blog with Angular\r\n\r\nAngular and the prerendering feature of Angular Universal are not described here.\r\nLet's check the official documentation instead.\r\n\r\n- [Angular](https://angular.io/)\r\n- [Angular Universal](https://angular.io/guide/universal)\r\n- [Angular Universal prerendering](https://angular.io/guide/prerendering)\r\n\r\nSince Angular prepared all the ingredients for the cooking,\r\nall I had to do was make data for prerendering.\r\n\r\n## Prepare raw post data\r\n\r\nThe list of required data is as follows:\r\n\r\n- Pagination data for displaying the post list.\r\n- Post detail data to show the post page.\r\n- Entire posts data to be used for post search.\r\n- Entire tags data to be used on the tag search page.\r\n\r\nFor this, it was necessary to define the post structure correctly,\r\nand the way I chose was to create one directory per post.\r\nAnd then, create a json file containing the metadata of the post and a markdown file for the contents.\r\n\r\n```\r\n// The `assets` directory is Angular's default asset root.\r\n// All the posts should be place in `posts` directory.\r\n// The directory name in `posts` will be an `id` of each post.\r\n\r\nassets\r\n└ posts\r\n  └ directory\r\n    ├ meta.json\r\n    └ index.md\r\n```\r\n\r\nI made the meta.json file have the following contents:\r\n\r\n```json\r\n{\r\n  \"title\": \"string\",\r\n  \"description\": \"string\",\r\n  \"keywords\": [\r\n    \"string\"\r\n  ],\r\n  \"tags\": [\r\n    \"string\"\r\n  ],\r\n  \"banner\": \"string\",\r\n  \"thumbnail\": \"string\",\r\n  \"bannerCredit\": {\r\n    \"name\": \"string\",\r\n    \"id\": \"string\"\r\n  },\r\n  \"publish\": \"string\"\r\n}\r\n```\r\n\r\nThe description of each property is as follows.\r\n\r\n- `title`: Post title.\r\n- `description`: Post description. It is not for SEO. The description for SEO will be created by using post contents.\r\n- `keywords`: Post keywords for SEO.\r\n- `tags`: Post tags. Will be used for searching posts by tags.\r\n- `banner`: Post banner image. It is shown from post detail page.\r\n- `thubmnail`: Post thumbnail image. It is shown from post list page.\r\n- `bannerCredit`: The credit text for post banner. It is for [Unsplash](https://unsplash.com) images. The `name` is username of unsplash photographer and `id` is his/her user id.\r\n- `publish`: Post publish datetime. If it is not set, post created date will be created date of `index.md`.\r\n\r\n## Create refined data during the build process\r\n\r\nAfter creating the post, I could create a static HTML file using Angular prerendering,\r\nbut before that, I had to create data for prerendering.\r\n\r\nTo do this, I created a script that refines the raw post data.\r\nSince it is too long to explain everything, I will only introduce function that make raw post data to a json file.\r\n\r\n```javascript\r\nconst fs = require('fs');\r\nconst path = require('path');\r\n\r\n/**\r\n * Get all available posts.\r\n * @returns {Post[]} All available posts.\r\n */\r\nfunction getPosts() {\r\n  const postDirectoryPath = `path-to-'assets/posts'`;\r\n  const contents = fs.readdirSync(postDirectoryPath);\r\n  const posts = [];\r\n\r\n  contents.forEach(content => {\r\n    const metaJson = fs.readFileSync(path.join(postDirectoryPath, content, 'meta.json'), {encoding: 'utf-8'});\r\n    const postContents = fs.readFileSync(path.join(postDirectoryPath, content, 'index.md'), {encoding: 'utf-8'});\r\n    const postStat = fs.statSync(path.join(postDirectoryPath, content, 'index.md'));\r\n    const meta = JSON.parse(metaJson);\r\n\r\n    // The `content` is directory name for each post, and it should be the `id` of post.\r\n    meta.id = content;\r\n    meta.contents = postContents;\r\n    meta.created = meta.publish || postStat.birthtime;\r\n\r\n    posts.push(meta);\r\n  });\r\n\r\n  // Order by `created` desc.\r\n  posts.sort((a, b) => {\r\n    return new Date(b.created) - new Date(a.created);\r\n  });\r\n\r\n  return posts;\r\n}\r\n```\r\n\r\nThe `posts` returned by the `getPosts()` method is an array of object\r\nwhich is made of each post directory within the `/assets/posts` directory.\r\n\r\nNow it's done!\r\nSince post data is made into objects,\r\nit is very easy to extract tags,\r\nextract each post data,\r\nextract pagination data for listing,\r\nand create these as json files.\r\nYou can also create your own sitemap and rss files with script.\r\n\r\nNext, use the generated json files to render your components\r\nand run Angular prerendering, then magically the static HTML files will be created.\r\n\r\n# Conclusion\r\n\r\nI know the explanation is not enough.\r\nBut I want you to know that it is difficult to explain everything.\r\nThe key is to use Angular prerendering and to pre-generate data for prerendering using scripts.\r\nIf you need more information, check out [this blog's repository](https://github.com/tk2rush90/loglog-source).\r\nScripts for data generation are located in the `/scripts` directory.\r\n","created":"2022-04-26 00:04:00"}