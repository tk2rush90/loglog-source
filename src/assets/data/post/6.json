{"title":"Merge images with Javascript","description":"Use canvas element to stack up images","keywords":["Javascript","Typescript","canvas","image","merge"],"tags":["Javascript","Typescript","canvas"],"banner":"/assets/images/posts/6/banner.png","thumbnail":"/assets/images/posts/6/thumbnail.png","bannerCredit":{"name":"Johnny Magrippis","id":"@jmagrippis"},"publish":"2022-04-26 19:18:00","id":"6","contents":"This is a post on how to combine several images into one on the client side.\r\nThis can be made possible by drawing images one by in the `<canvas>` element.\r\nWhat you need to know is `CanvasRenderingContext2D` of `<canvas>` element and `Image` class.\r\n\r\n# CanvasRenderingContext2D\r\n\r\n`CanvasRenderingContext2D` is a part of the [Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API)\r\nthat allows you to draw 2D images on the `<canvas>` element.\r\nYou can get this by using the `getContext()` method in the `<canvas>` element.\r\n\r\n```javascript\r\nconst cavnas = document.querySelector('canvas');\r\n/**\r\n * This is the `CanvasRenderingContext2D` of canvas element.\r\n * @type {CanvasRenderingContext2D}\r\n */\r\nconst context = canvas.getContext('2d');\r\n```\r\n\r\n`CanvasRenderingContext2D` has `drawImage()` method that allows you to add an image.\r\nYou must pass `CanvasImageSource` to the first parameter of this method.\r\nThe `CanvasImageSource` interface includes the followings:\r\n\r\n- `HTMLImageElement`\r\n- `SVGImageElement`\r\n- `HTMLVideoElement`\r\n- `HTMLCanvasElement`\r\n- `ImageBitmap`\r\n- `OffscreenCanvas`\r\n\r\nFrom here, I will let you know how to generate `HTMLImageElement` using the `Image` class.\r\n\r\n# Image class\r\n\r\nCreating `HTMLImageElement` by using `Image` class is simple.\r\n\r\n```javascript\r\n/**\r\n * You can pass the parameters to constructor to set image initial size.\r\n * @type {HTMLImageElement}\r\n */\r\nconst image = new Image();\r\n```\r\n\r\nSince the generated `image` is `HTMLImageElement`, you can set image url to `src` property.\r\nAnd after the image is loaded, you can add it to the canvas using the `drawImage()` method.\r\n\r\n```javascript\r\nconst canvas = document.querySelector('canvas');\r\nconst context = canvas.getContext('2d');\r\n\r\nconst image = new Image();\r\n\r\nimage.src = 'https://upload.wikimedia.org/wikipedia/commons/e/ed/Elon_Musk_Royal_Society.jpg';\r\nimage.onload = () => {\r\n  context.drawImage(\r\n    image,\r\n    0, // The image x position in canvas.\r\n    0, // The image y position in canvas.\r\n    567, // Image width to draw in canvas.\r\n    864, // Image height to draw in canvas.\r\n  );\r\n}\r\n```\r\n\r\nDon't forget to adjust the size of the image to be drawn on the canvas to the canvas area.\r\nBelow is the utilised source code.\r\n\r\n# Utilized source code\r\n\r\n## Javascript\r\n\r\n```javascript\r\n/**\r\n * Class to draw layer on canvas.\r\n * @param canvas {HTMLCanvasElement}\r\n * @constructor\r\n */\r\nfunction CanvasLayerDrawer(canvas) {\r\n  /**\r\n   * Set canvas original element.\r\n   * @type {HTMLCanvasElement}\r\n   */\r\n  this._canvas = canvas;\r\n  \r\n  /**\r\n   * Set context.\r\n   * @type {CanvasRenderingContext2D}\r\n   */\r\n  this._context = this._canvas.getContext('2d');\r\n}\r\n\r\n/**\r\n * Add image to canvas by using image url.\r\n * @param src {string} Image url to draw.\r\n * @param x {number} The image x position in canvas.\r\n * @param y {number} The image y position in canvas.\r\n * @param width {number} Image width to draw in canvas.\r\n * @param height {number} Image height to draw in canvas.\r\n */\r\nCanvasLayerDrawer.prototype.addImageLayerByUrl = function (src, x, y, width, height) {\r\n  return new Promise((resolve, reject) => { \r\n    const image = new Image();\r\n    \r\n    image.onerror = () => {\r\n      reject();\r\n    }\r\n    \r\n    image.onload = () => {\r\n      this.addImageLayer(image, x, y, width, height);\r\n      resolve();\r\n    }\r\n    \r\n    image.src = src;\r\n  });\r\n}\r\n\r\n/**\r\n * Add image source to canvas.\r\n * @param image {CanvasImageSource} Image source to render.\r\n * @param x {number} The image x position in canvas.\r\n * @param y {number} The image y position in canvas.\r\n * @param width {number} Image width to draw in canvas.\r\n * @param height {number} Image height to draw in canvas.\r\n */\r\nCanvasLayerDrawer.prototype.addImageLayer = function (image, x, y, width, height) {\r\n  this._context.drawImage(image, x, y, width, height);\r\n}\r\n```\r\n\r\n## Typescript\r\n\r\n```typescript\r\n/**\r\n * Class to draw layer on canvas.\r\n */\r\nclass CanvasLayerDrawer {\r\n  /**\r\n   * The canvas original element.\r\n   */\r\n  private _canvas: HTMLCanvasElement;\r\n\r\n  /**\r\n   * The canvas 2D rendering context.\r\n   */\r\n  private _context: CanvasRenderingContext2D;\r\n  \r\n  constructor(canvas: HTMLCanvasElement) {\r\n    this._canvas = canvas;\r\n    this._context = canvas.getContext('2d');\r\n  }\r\n\r\n  /**\r\n   * Add image to canvas by using image url.\r\n   * @param src Image url to draw.\r\n   * @param x The image x position in canvas.\r\n   * @param y The image y position in canvas.\r\n   * @param width Image width to draw in canvas.\r\n   * @param height Image height to draw in canvas.\r\n   */\r\n  addImageLayerByUrl(\r\n    src: string,\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number,\r\n  ): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      const image = new Image();\r\n\r\n      image.onerror = () => {\r\n        reject();\r\n      }\r\n\r\n      image.onload = () => {\r\n        this.addImageLayer(image, x, y, width, height);\r\n        resolve();\r\n      }\r\n\r\n      image.src = src;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add image source to canvas.\r\n   * @param image Image source to render.\r\n   * @param x The image x position in canvas.\r\n   * @param y The image y position in canvas.\r\n   * @param width Image width to draw in canvas.\r\n   * @param height Image height to draw in canvas.\r\n   */\r\n  addImageLayer(\r\n    image: CanvasImageSource,\r\n    x: number,\r\n    y: number,\r\n    width: number,\r\n    height: number,\r\n  ): void {\r\n    this._context.drawImage(image, x, y, width, height);\r\n  }\r\n}\r\n```\r\n\r\n## Usage\r\n\r\n```javascript\r\nconst canvas = document.querySelector('canvas');\r\nconst canvasLayerDrawer = new canvasLayerDrawer(canvas);\r\n\r\ncanvasLayerDrawer.addImageLayerByUrl(\r\n  'https://upload.wikimedia.org/wikipedia/commons/e/ed/Elon_Musk_Royal_Society.jpg',\r\n  0,\r\n  0,\r\n  567,\r\n  864,\r\n).then(() => console.log('added')).catch(() => console.log('failed to load image'));\r\n```\r\n","created":"2022-04-26 19:18:00"}